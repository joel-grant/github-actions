aname: Terraform Deploy

on:
  workflow_call:
    inputs:
      terraform_version:
        description: 'Terraform version to use'
        required: false
        type: string
        default: '1.5.7'
      working_directory:
        description: 'Directory containing Terraform configuration'
        required: false
        type: string
        default: '.'
      environment:
        description: 'Environment name for deployment'
        required: false
        type: string
        default: 'production'
      auto_approve:
        description: 'Auto-approve terraform apply (use with caution)'
        required: false
        type: boolean
        default: true

jobs:
  terraform-deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    permissions:
      contents: read
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          
      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ inputs.working_directory }}
        
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ inputs.working_directory }}
        
      - name: Terraform Plan
        id: plan
        run: |
          # For Terraform Cloud, we don't use -out flag as plans are stored remotely
          if terraform show -json 2>/dev/null | jq -r '.backend' 2>/dev/null | grep -q 'remote\|cloud' 2>/dev/null; then
            terraform plan -no-color
          else
            terraform plan -no-color -out=tfplan
          fi
        working-directory: ${{ inputs.working_directory }}
        
      - name: Terraform Apply
        id: apply
        run: |
          # For Terraform Cloud, we don't use plan files
          if terraform show -json 2>/dev/null | jq -r '.backend' 2>/dev/null | grep -q 'remote\|cloud' 2>/dev/null; then
            if [ "${{ inputs.auto_approve }}" = "true" ]; then
              terraform apply -auto-approve
            else
              terraform apply
            fi
          else
            if [ "${{ inputs.auto_approve }}" = "true" ]; then
              terraform apply -auto-approve tfplan
            else
              terraform apply tfplan
            fi
          fi
        working-directory: ${{ inputs.working_directory }}
        
      - name: Terraform Output
        id: output
        run: terraform output -json > terraform_outputs.json || echo "{}" > terraform_outputs.json
        working-directory: ${{ inputs.working_directory }}
        continue-on-error: true
        
      - name: Upload Terraform Outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs-${{ inputs.environment }}
          path: ${{ inputs.working_directory }}/terraform_outputs.json
          retention-days: 30
          
      - name: Deployment Summary
        run: |
          echo "## Terraform Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Working Directory:** ${{ inputs.working_directory }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Terraform Version:** ${{ inputs.terraform_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** âœ… Deployed successfully" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
